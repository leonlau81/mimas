########################################################
###EMBEDDED SERVER CONFIGURATION (ServerProperties)
########################################################
server.port=8084
#server.address= # bind to a specific NIC
#server.session-timeout= # session timeout in seconds
#the context path, defaults to '/'
#server.context-path=/spring-boot
#server.servlet-path= # the servlet path, defaults to '/'
#server.tomcat.access-log-pattern= # log pattern of the access log
#server.tomcat.access-log-enabled=false # is access logging enabled
#server.tomcat.protocol-header=x-forwarded-proto # ssl forward headers
#server.tomcat.remote-ip-header=x-forwarded-for
#server.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp)
#server.tomcat.background-processor-delay=30; # in seconds
#server.tomcat.max-threads = 0 # number of threads in protocol handler
#server.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding

spring.datasource.url=jdbc:mysql://101.201.150.111:3306/comb_test
spring.datasource.username=root
spring.datasource.password=abc@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.initial-size=2
spring.datasource.max-active=20
spring.datasource.min-idle=1
spring.datasource.max-idle=10
spring.datasource.max-wait=60000
spring.datasource.time-between-eviction-runs-millis=3000
spring.datasource.min-evictable-idle-time-millis=300000
spring.datasource.validation-query=select 1
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.remove-abandoned=true
spring.datasource.remove-abandoned-timeout=180
spring.datasource.connection-properties="clientEncoding=UTF-8"

#spring jpa config
spring.jpa.show-sql=false

#mybatis config
mybatis.type-aliases-package=com.example.domain.model
mybatis.type-handlers-package=com.example.typehandler
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=30

#shiro redis 配置
spring.redis.shiro.host=115.29.189.52
spring.redis.shiro.port=6379
spring.redis.shiro.database=3 
spring.redis.shiro.timeout=3000 
spring.redis.shiro.password=hzWKbjdc1902iuo23dsfds7897sdfADJK32ajkjljkakfjkakfkl1231023120897AADFSddsdfsdfx

#国际化i18n configuation
spring.messages.basename=i18n/webMessages,i18n/serviceMessages

#rocket mq 配置 
spring.rocketmq.enable=true
# namesrvAddr地址
spring.rocketmq.namesrvAddr=192.168.8.100:9876
# 生产者group名称
spring.rocketmq.producerGroupName=producerGroupName
# 事务生产者group名称
spring.rocketmq.transactionProducerGroupName=transactionProducerGroupName
# 消费者group名称
spring.rocketmq.consumerGroupName=consumerGroupName
# 生产者实例名称
spring.rocketmq.producerInstanceName=producerInstanceName
# 消费者实例名称
spring.rocketmq.consumerInstanceName=consumerInstanceName
# 事务生产者实例名称
spring.rocketmq.producerTranInstanceName=producerTranInstanceName
# 一次最大消费多少数量消息
spring.rocketmq.consumerBatchMaxSize=1
# 广播消费
spring.rocketmq.consumerBroadcasting=false
# 消费的topic：tag
spring.rocketmq.subscribe=TopicTest1:TagA
# 启动的时候是否消费历史记录
spring.rocketmq.enableHisConsumer=false
# 启动顺序消费
spring.rocketmq.enableOrderConsumer=false


#kafka 配置
spring.kafka.enable=true
spring.kafka.consumer.group-id=kfkGroup
# 指定消息被消费之后自动提交偏移量（即消息的编号，表示消费到了哪个位置，消费者每消费完一条消息就会向kafka服务器汇报自己消消费到的那个消息的编号，以便于下次继续消费）。
spring.kafka.enable-auto-commit=true
# 从最近的地方开始消费
spring.kafka.auto-offset-reset=latest
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=192.168.8.100:9092,192.168.8.100:9093,192.168.8.100:9094
# 指定listener 容器中的线程数，用于提高并发量
spring.kafka.listener.concurrency= 3
# 每次批量发送消息的数量
spring.kafka.producer.batch-size= 1000

#spring cloud
eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka/
spring.application.name=service-consumer
feign.hystrix.enabled=true
#负载均衡策略(作用于ribbon和feign，服务名+ribbon+配置项=配置的类)
#service-cloud.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.WeightedResponseTimeRule

#spring cloud config client
# 已经将config-server作为服务注册到uereka,以下两个配置支持从服务获取配置，即config server可以支持高可用。开启config服务发现，指定config服务名称
spring.cloud.config.discovery.enabled=true  
spring.cloud.config.discovery.service-id=service-config   
# 单点config server的配置
#spring.cloud.config.uri=http://localhost:8888/
spring.cloud.config.label=master
spring.cloud.config.profile=dev








#redis config
#################redis基础配置#################
spring.redis.database=3 
spring.redis.host=115.29.189.52
spring.redis.password=hzWKbjdc1902iuo23dsfds7897sdfADJK32ajkjljkakfjkakfkl1231023120897AADFSddsdfsdfx
spring.redis.port=6379
# 连接超时时间 单位 ms（毫秒）
spring.redis.timeout=3000 

#################redis线程池设置#################
# 连接池中的最大空闲连接，默认值也是8。
spring.redis.pool.max-idle=100
#连接池中的最小空闲连接，默认值也是0。
spring.redis.pool.min-idle=20
# 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
spring.redis.pool.max-active=2000
# 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
spring.redis.pool.max-wait=1000

#################redis哨兵设置#################
# Redis服务器master的名字
#spring.redis.sentinel.master=master8026
# redis-sentinel的配置地址和端口
#spring.redis.sentinel.nodes=10.189.80.25:26379,10.189.80.26:26379,10.189.80.27:26378

